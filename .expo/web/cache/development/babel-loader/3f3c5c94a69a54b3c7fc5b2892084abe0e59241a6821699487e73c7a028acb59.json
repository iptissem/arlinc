{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as Notifications from 'expo-notifications';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nNotifications.setNotificationHandler({\n  handleNotification: function () {\n    var _handleNotification = _asyncToGenerator(function* () {\n      return {\n        shouldShowAlert: true,\n        shouldPlaySound: true,\n        shouldSetBadge: true\n      };\n    });\n    function handleNotification() {\n      return _handleNotification.apply(this, arguments);\n    }\n    return handleNotification;\n  }()\n});\nexport var NotificationService = {\n  requestPermissions: function () {\n    var _requestPermissions = _asyncToGenerator(function* () {\n      if (Platform.OS === 'web') {\n        console.log('Les notifications ne sont pas disponibles sur Web.');\n        return false;\n      }\n      var _yield$Notifications$ = yield Notifications.requestPermissionsAsync(),\n        status = _yield$Notifications$.status;\n      return status === 'granted';\n    });\n    function requestPermissions() {\n      return _requestPermissions.apply(this, arguments);\n    }\n    return requestPermissions;\n  }(),\n  scheduleDonationReminder: function () {\n    var _scheduleDonationReminder = _asyncToGenerator(function* (donation) {\n      if (Platform.OS === 'web') {\n        console.log('Les notifications ne sont pas disponibles sur Web.');\n        return;\n      }\n      var trigger = new Date(donation.availableUntil);\n      trigger.setHours(trigger.getHours() - 1);\n      try {\n        yield Notifications.scheduleNotificationAsync({\n          content: {\n            title: \"Rappel de don\",\n            body: `N'oubliez pas votre don chez ${donation.storeName} !`,\n            data: {\n              donationId: donation.id\n            }\n          },\n          trigger: trigger\n        });\n      } catch (error) {\n        console.error('Erreur lors de la planification de la notification:', error);\n      }\n    });\n    function scheduleDonationReminder(_x) {\n      return _scheduleDonationReminder.apply(this, arguments);\n    }\n    return scheduleDonationReminder;\n  }(),\n  sendRewardNotification: function () {\n    var _sendRewardNotification = _asyncToGenerator(function* (points) {\n      if (Platform.OS === 'web') {\n        console.log('Les notifications ne sont pas disponibles sur Web.');\n        return;\n      }\n      try {\n        yield Notifications.scheduleNotificationAsync({\n          content: {\n            title: \"Nouvelle récompense !\",\n            body: `Félicitations ! Vous avez atteint ${points} points.`\n          },\n          trigger: null\n        });\n      } catch (error) {\n        console.error('Erreur lors de l\\'envoi de la notification:', error);\n      }\n    });\n    function sendRewardNotification(_x2) {\n      return _sendRewardNotification.apply(this, arguments);\n    }\n    return sendRewardNotification;\n  }()\n};","map":{"version":3,"names":["Notifications","AsyncStorage","Platform","setNotificationHandler","handleNotification","_handleNotification","_asyncToGenerator","shouldShowAlert","shouldPlaySound","shouldSetBadge","apply","arguments","NotificationService","requestPermissions","_requestPermissions","OS","console","log","_yield$Notifications$","requestPermissionsAsync","status","scheduleDonationReminder","_scheduleDonationReminder","donation","trigger","Date","availableUntil","setHours","getHours","scheduleNotificationAsync","content","title","body","storeName","data","donationId","id","error","_x","sendRewardNotification","_sendRewardNotification","points","_x2"],"sources":["/Users/elleiryc/Desktop/Arl copie/arl.inc/src/services/NotificationService.js"],"sourcesContent":["import * as Notifications from 'expo-notifications';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Platform } from 'react-native';  // Importation de Platform\n\n// Définir le gestionnaire de notifications\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n  }),\n});\n\nexport const NotificationService = {\n  // Demande de permissions pour afficher des notifications\n  async requestPermissions() {\n    if (Platform.OS === 'web') {\n      console.log('Les notifications ne sont pas disponibles sur Web.');\n      return false;\n    }\n    \n    const { status } = await Notifications.requestPermissionsAsync();\n    return status === 'granted';\n  },\n\n  // Planification du rappel de don\n  async scheduleDonationReminder(donation) {\n    if (Platform.OS === 'web') {\n      console.log('Les notifications ne sont pas disponibles sur Web.');\n      return;\n    }\n\n    const trigger = new Date(donation.availableUntil);\n    trigger.setHours(trigger.getHours() - 1); // 1 heure avant\n\n    try {\n      await Notifications.scheduleNotificationAsync({\n        content: {\n          title: \"Rappel de don\",\n          body: `N'oubliez pas votre don chez ${donation.storeName} !`,\n          data: { donationId: donation.id },\n        },\n        trigger,\n      });\n    } catch (error) {\n      console.error('Erreur lors de la planification de la notification:', error);\n    }\n  },\n\n  // Envoi d'une notification pour les récompenses\n  async sendRewardNotification(points) {\n    if (Platform.OS === 'web') {\n      console.log('Les notifications ne sont pas disponibles sur Web.');\n      return;\n    }\n\n    try {\n      await Notifications.scheduleNotificationAsync({\n        content: {\n          title: \"Nouvelle récompense !\",\n          body: `Félicitations ! Vous avez atteint ${points} points.`,\n        },\n        trigger: null, // Notification immédiate\n      });\n    } catch (error) {\n      console.error('Erreur lors de l\\'envoi de la notification:', error);\n    }\n  },\n};\n"],"mappings":";AAAA,OAAO,KAAKA,aAAa,MAAM,oBAAoB;AACnD,OAAOC,YAAY,MAAM,2CAA2C;AAAC,OAAAC,QAAA;AAIrEF,aAAa,CAACG,sBAAsB,CAAC;EACnCC,kBAAkB;IAAA,IAAAC,mBAAA,GAAAC,iBAAA,CAAE;MAAA,OAAa;QAC/BC,eAAe,EAAE,IAAI;QACrBC,eAAe,EAAE,IAAI;QACrBC,cAAc,EAAE;MAClB,CAAC;IAAA,CAAC;IAAA,SAJFL,kBAAkBA,CAAA;MAAA,OAAAC,mBAAA,CAAAK,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAlBP,kBAAkB;EAAA;AAKpB,CAAC,CAAC;AAEF,OAAO,IAAMQ,mBAAmB,GAAG;EAE3BC,kBAAkB;IAAA,IAAAC,mBAAA,GAAAR,iBAAA,cAAG;MACzB,IAAIJ,QAAQ,CAACa,EAAE,KAAK,KAAK,EAAE;QACzBC,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;QACjE,OAAO,KAAK;MACd;MAEA,IAAAC,qBAAA,SAAyBlB,aAAa,CAACmB,uBAAuB,CAAC,CAAC;QAAxDC,MAAM,GAAAF,qBAAA,CAANE,MAAM;MACd,OAAOA,MAAM,KAAK,SAAS;IAC7B,CAAC;IAAA,SARKP,kBAAkBA,CAAA;MAAA,OAAAC,mBAAA,CAAAJ,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAlBE,kBAAkB;EAAA;EAWlBQ,wBAAwB;IAAA,IAAAC,yBAAA,GAAAhB,iBAAA,YAACiB,QAAQ,EAAE;MACvC,IAAIrB,QAAQ,CAACa,EAAE,KAAK,KAAK,EAAE;QACzBC,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;QACjE;MACF;MAEA,IAAMO,OAAO,GAAG,IAAIC,IAAI,CAACF,QAAQ,CAACG,cAAc,CAAC;MACjDF,OAAO,CAACG,QAAQ,CAACH,OAAO,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAExC,IAAI;QACF,MAAM5B,aAAa,CAAC6B,yBAAyB,CAAC;UAC5CC,OAAO,EAAE;YACPC,KAAK,EAAE,eAAe;YACtBC,IAAI,EAAE,gCAAgCT,QAAQ,CAACU,SAAS,IAAI;YAC5DC,IAAI,EAAE;cAAEC,UAAU,EAAEZ,QAAQ,CAACa;YAAG;UAClC,CAAC;UACDZ,OAAO,EAAPA;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;QACdrB,OAAO,CAACqB,KAAK,CAAC,qDAAqD,EAAEA,KAAK,CAAC;MAC7E;IACF,CAAC;IAAA,SArBKhB,wBAAwBA,CAAAiB,EAAA;MAAA,OAAAhB,yBAAA,CAAAZ,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAxBU,wBAAwB;EAAA;EAwBxBkB,sBAAsB;IAAA,IAAAC,uBAAA,GAAAlC,iBAAA,YAACmC,MAAM,EAAE;MACnC,IAAIvC,QAAQ,CAACa,EAAE,KAAK,KAAK,EAAE;QACzBC,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;QACjE;MACF;MAEA,IAAI;QACF,MAAMjB,aAAa,CAAC6B,yBAAyB,CAAC;UAC5CC,OAAO,EAAE;YACPC,KAAK,EAAE,uBAAuB;YAC9BC,IAAI,EAAE,qCAAqCS,MAAM;UACnD,CAAC;UACDjB,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;QACdrB,OAAO,CAACqB,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACrE;IACF,CAAC;IAAA,SAjBKE,sBAAsBA,CAAAG,GAAA;MAAA,OAAAF,uBAAA,CAAA9B,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAtB4B,sBAAsB;EAAA;AAkB9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}